'For https://www.reddit.com/r/excel/comments/1124xdz/dart_league_select_3_games_for_each_participant/
Const MATCH_FORMAT As String = "<player1> vs <player2>"  'must include "<player1>" and "<player2>" somewhere

Public Sub GenerateMatches()
    Dim matchSheet As Excel.Worksheet
    Dim players As New Collection
    Dim matches As New Collection
    Dim a As Variant
    Dim aStart As Long, aEnd As Long, aStep As Long
    Dim i As Long, j As Long
        
    'Build player dictionary
    With Excel.ThisWorkbook.Worksheets("Deelnemers")
        For i = 1 To .Cells(.Rows.Count, "A").End(xlUp).Row
            If Not ExistsInCollection(players, .Cells(i, "A").Value2) And .Cells(i, "A").Value2 <> "" Then
                players.Add .Cells(i, "A").Value2
            Else
                'player already exists, maybe alert the user of the duplicate?
            End If
        Next
    End With
    RandomizeCollection players
    
    'Iterate through players colleciton to build a chain of matches, output to match sheet
    Select Case True
    Case players.Count < 4
        'Error
        'err.Raise vbObjectError + 13, "Array must have more than 4 items"
    Case players.Count = 4
        matches.Add FormatMatch(players(1), players(2))
        matches.Add FormatMatch(players(1), players(3))
        matches.Add FormatMatch(players(2), players(4))
        matches.Add FormatMatch(players(3), players(4))
        matches.Add FormatMatch(players(3), players(2))
        matches.Add FormatMatch(players(4), players(1))
    Case (players.Count Mod 2) = 0 'Even >4
        For i = 1 To players.Count
            If (i - 1) Mod 2 = 0 Then 'Bottom Row, pull above and to the right
                matches.Add FormatMatch(players.Item(i), players.Item((i Mod players.Count) + 1))
                matches.Add FormatMatch(players.Item(i), players.Item(((i + 1) Mod players.Count) + 1))
            Else 'TopRow, pull to the right
                matches.Add FormatMatch(players.Item(i), players.Item(((i + 1) Mod players.Count) + 1))
            End If
        Next
    Case (players.Count Mod 2) = 1 'Odd >4
        For i = 1 To players.Count
            If (i - 1) Mod 2 = 0 Then 'Bottom Row, pull above and to the right
                matches.Add FormatMatch(players.Item(i), players.Item((i Mod players.Count) + 1))
                matches.Add FormatMatch(players(i), players(((i + 1) Mod players.Count) + 1))
            Else
                If (i + 1) < players.Count Then 'TopRow, pull to the right if we're not at the end
                    matches.Add FormatMatch(players.Item(i), players.Item(((i + 1) Mod players.Count) + 1))
                Else 'bye
                    matches.Add players.Item(i) & " - bye"
                End If
            End If
        Next
    End Select
    
    'Output Matches to sheet
    Set matchSheet = GetSheet("Maand") 'Clears/creates a new sheet
    For i = 1 To matches.Count
        matchSheet.Range("A1").Offset(i - 1, 0).Value2 = matches(i)
    Next
    
End Sub

Public Function FormatMatch(ByVal player1 As Variant, ByVal player2 As Variant) As Variant
    FormatMatch = Replace(Replace(MATCH_FORMAT, "<player1>", player1), "<player2>", player2)
End Function

Public Sub RandomizeCollection(ByRef col As Collection)
    Dim a() As Variant
    Dim n() As Single
    Dim i As Integer, j As Integer
    Dim tmp As Variant, tmpS As Single
    
    'Populate collection into Array
    ReDim a(1 To col.Count) As Variant
    For i = 1 To col.Count
        a(i) = col(i)
    Next
    
    'Generate list of random numbers
    Randomize
    ReDim n(1 To col.Count) As Single
    For i = 1 To col.Count
        n(i) = Rnd()
    Next
    
    'Sort col by random numbers
    For i = 1 To col.Count
        For j = i + 1 To col.Count
            If n(i) > n(j) Then
                tmp = a(j)
                a(j) = a(i)
                a(i) = tmp
            End If
        Next
    Next
    
    'Convert array back to collection
    For i = col.Count To 1 Step -1
        col.Remove i
    Next
    For i = LBound(a) To UBound(a)
        col.Add a(i)
    Next
End Sub

Public Function ExistsInCollection(ByRef col As Collection, ByVal key As String) As Boolean
    On Error GoTo FuncError
    ExistsInCollection = True
    IsObject (col.Item(key))
    Exit Function
FuncError:
    ExistsInCollection = False
End Function

Public Function GetSheet(ByVal sheetName As String) As Excel.Worksheet
    'Wipes/add and returns sheet
    Dim ws As Excel.Worksheet
    On Error GoTo FuncError
    Set ws = Excel.ThisWorkbook.Worksheets(sheetName)
    ws.UsedRange.Clear
    Set GetSheet = ws
    Exit Function
FuncError:
    Set ws = Excel.ThisWorkbook.Worksheets.Add
    ws.name = sheetName
    Set GetSheet = ws
End Function

