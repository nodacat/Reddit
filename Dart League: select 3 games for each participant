'For https://www.reddit.com/r/excel/comments/1124xdz/dart_league_select_3_games_for_each_participant/
Const MATCH_FORMAT As String = "<player1> vs <player2>"  'must include "<player1>" and "<player2>" somewhere
Const BYE_FORMAT As String = "<player1> - Bye" 'must include "<playe1>" somewhere
Const MAKEUP_FACTOR As Double = 0.7 'set somewhere between 0.5 and 1, to people with makeup games appear more frequently during dispursion (we want this)

Public Sub GenerateMatches()
    Dim matchSheet As Excel.Worksheet
    Dim players As New Collection
    Dim makeup_players As New Collection
    Dim matches() As Integer
    Dim ogMatchesCount As Integer
    Dim makeup_matches() As Integer
    Dim i As Long, j As Long, k As Long
    
    'Build player dictionary
    With Excel.ThisWorkbook.Worksheets("Deelnemers")
        For i = 1 To .Cells(.Rows.Count, "A").End(xlUp).Row
            If Not ExistsInCollection(players, .Cells(i, "A").Value2) And .Cells(i, "A").Value2 <> "" Then
                players.Add .Cells(i, "A").Value2
                
                If .Cells(i, "A").Font.Bold = True Then
                    makeup_players.Add .Cells(i, "A").Value2
                End If
            Else
                'player already exists, maybe alert the user of the duplicate?
            End If
        Next
    End With
    RandomizeCollection players
    BuildMatchesArray players, matches
    ogMatchesCount = UBound(matches, 2)
    
    'If we had make up games, append them to the match array
    ' - independently create matches for makeup players, they play only each other
    If makeup_players.Count > 0 Then
        RandomizeCollection makeup_players
        BuildMatchesArray makeup_players, makeup_matches
    
        'Append makupes to original match array
        For i = LBound(makeup_matches, 2) To UBound(makeup_matches, 2)
            j = IndexOfCollection(players, makeup_players(makeup_matches(1, i)))
            k = IndexOfCollection(players, makeup_players(makeup_matches(2, i)))
            AddMatch matches, j, k
        Next
    End If
    
    'Get/Create Sheet
    Set matchSheet = GetSheet("Maand") 'Clears/creates a new sheet
    
    'Distirbute matches evenly
    Dim lastPlayedIndex() As Integer, alreadyMatched() As Boolean
    Dim tmpMatchScore As Double, matchScore As Double, chosenMatch As Integer
    
    ReDim alreadyMatched(1 To UBound(matches, 2)) As Boolean
    ReDim lastPlayedIndex(1 To players.Count) As Integer
    k = 0
    
    While k < UBound(matches, 2) Or k > 1000
        'start with a player, search for best match to play based on distance to last played
        matchScore = -1
        For i = 1 To players.Count
            For j = 1 To UBound(matches, 2)
                'find match that hasn't already been listed and contains the current player
                If Not alreadyMatched(j) And (matches(1, j) = i Or matches(2, j) = i) Then
                    
                    'check how long ago it was used
                    ' - MAKEUP_FACTOR was intended to allow folks with makeup games to appear more frequently throughout the session, otherwise
                    '   they would be all be pushed to the end (since other people haven't played as much as them).  Setting this less than one
                    '   ex 0.7, makes it so they appear again sooner when determining a "chosenMatch"
                    tmpMatchScore = lastPlayedIndex(matches(1, j)) * IIf(j > ogMatchesCount, MAKEUP_FACTOR, 1) + lastPlayedIndex(matches(2, j)) * IIf(j > ogMatchesCount, MAKEUP_FACTOR, 1)
                    If tmpMatchScore < matchScore Or matchScore = -1 Then
                        matchScore = tmpMatchScore
                        chosenMatch = j
                    End If
                    
                End If
            Next
        Next
        
        'Output best match
        matchSheet.Range("A1").Offset(k, 0).Value2 = FormatMatch(players(matches(1, chosenMatch)), players(matches(2, chosenMatch))) & IIf(chosenMatch > ogMatchesCount, " (Makeup)", "")
        lastPlayedIndex(matches(1, chosenMatch)) = k + 1
        lastPlayedIndex(matches(2, chosenMatch)) = k + 1
        alreadyMatched(chosenMatch) = True
        k = k + 1
    Wend
    

End Sub

Public Function IndexOfCollection(ByRef col As Collection, ByVal item As Variant) As Integer
    Dim i As Long
    For i = 1 To col.Count
        If col(i) = item Then
            IndexOfCollection = i
            Exit Function
        End If
    Next
End Function

Public Sub BuildMatchesArray(ByRef players As Collection, ByRef matches() As Integer)
    Dim i As Integer

    'Iterate through players colleciton to build a chain of matches, output to match sheet
    Select Case True
    Case players.Count < 4
        'Error
        err.Raise vbObjectError + 13, , "Array must have more than 4 items"
    Case players.Count = 4

        AddMatch matches, 1, 2
        AddMatch matches, 1, 3
        AddMatch matches, 2, 4
        AddMatch matches, 3, 4
        AddMatch matches, 3, 2
        AddMatch matches, 4, 1

    Case (players.Count Mod 2) = 0 'Even >4
        For i = 1 To players.Count
            If (i - 1) Mod 2 = 0 Then
                'Bottom Row, pull above and to the right
                AddMatch matches, i, (i Mod players.Count) + 1
                AddMatch matches, i, ((i + 1) Mod players.Count) + 1
            Else
                'TopRow, pull to the right
                AddMatch matches, i, ((i + 1) Mod players.Count) + 1
            End If
        Next
        
    Case (players.Count Mod 2) = 1 'Odd >4
        For i = 1 To players.Count
            If (i - 1) Mod 2 = 0 Then
                'Bottom Row, pull above and to the right
                AddMatch matches, i, (i Mod players.Count) + 1
                AddMatch matches, i, ((i + 1) Mod players.Count) + 1
            Else
                If (i + 1) < players.Count Then
                    'TopRow, pull to the right if we're not at the end
                    AddMatch matches, i, ((i + 1) Mod players.Count) + 1
                Else 'bye (same person twice)
                    AddMatch matches, i, i
                End If
            End If
        Next
    End Select
End Sub

Public Sub AddMatch(ByRef matches() As Integer, ByVal intA As Integer, ByVal intB As Integer)
    'Helper function to build 2d matches array and append to it like a collection
    
    'check bounds on array
    Dim is2D As Boolean
    On Error Resume Next
    is2D = IsNumeric(UBound(matches, 2))
    On Error GoTo 0
    
    'Declare or append to matches array
    If IsEmpty(matches) Or Not is2D Then
        ReDim matches(1 To 2, 1 To 1) As Integer
        matches(1, 1) = intA
        matches(2, 1) = intB
    Else
        Dim t As Integer
        t = UBound(matches, 2) + 1
        ReDim Preserve matches(1 To 2, 1 To t) As Integer
        matches(1, t) = intA
        matches(2, t) = intB
    End If
End Sub

Public Function FormatMatch(ByVal player1 As Variant, ByVal player2 As Variant) As Variant
    If player1 = player2 Then
        'we have a bye!
        FormatMatch = Replace(BYE_FORMAT, "<player1>", player1)
    Else
        FormatMatch = Replace(Replace(MATCH_FORMAT, "<player1>", player1), "<player2>", player2)
    End If
End Function

Public Sub RandomizeCollection(ByRef col As Collection)
    Dim a() As Variant
    Dim n() As Single
    Dim i As Integer, j As Integer
    Dim tmp As Variant, tmpS As Single
    
    'Populate collection into Array
    ReDim a(1 To col.Count) As Variant
    For i = 1 To col.Count
        a(i) = col(i)
    Next
    
    'Generate list of random numbers
    Randomize
    ReDim n(1 To col.Count) As Single
    For i = 1 To col.Count
        n(i) = Rnd()
    Next
    
    'Sort col by random numbers
    For i = 1 To col.Count
        For j = i + 1 To col.Count
            If n(i) > n(j) Then
                tmp = a(j)
                a(j) = a(i)
                a(i) = tmp
            End If
        Next
    Next
    
    'Convert array back to collection
    For i = col.Count To 1 Step -1
        col.Remove i
    Next
    For i = LBound(a) To UBound(a)
        col.Add a(i)
    Next
End Sub

Public Function ExistsInCollection(ByRef col As Collection, ByVal key As String) As Boolean
    On Error GoTo FuncError
    ExistsInCollection = True
    IsObject (col.item(key))
    Exit Function
FuncError:
    ExistsInCollection = False
End Function

Public Function GetSheet(ByVal sheetName As String) As Excel.Worksheet
    'Wipes/add and returns sheet
    Dim ws As Excel.Worksheet
    On Error GoTo FuncError
    Set ws = Excel.ThisWorkbook.Worksheets(sheetName)
    ws.UsedRange.Clear
    Set GetSheet = ws
    Exit Function
FuncError:
    Set ws = Excel.ThisWorkbook.Worksheets.Add
    ws.name = sheetName
    Set GetSheet = ws
End Function
