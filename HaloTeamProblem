
#from: https://github.com/nodacat/Reddit/blob/main/HaloTeamProblem
#==============================================================================================================================================
#Populate variables here (use excel formulas to right to help)

# People
#   dictionary containing name/nc score pairs
#   use this excel formula to help populate, example has Names in B7:B20 and NC Scores in C7:C20
#   ="{"&TEXTJOIN(", ",TRUE,"'"&B7:B20&"' : "&C7:C20)&"}"
people = {'Jackie':-3.13,'Jordan':-0.15,'Nick M.':5.35,'Craig':5.83,'Derek':6.62,'JP':7.00,'Nick J.':7.50,'Brandon P.':8.32,'Al':8.39,'John':11.23,'Erik':12.98,'Matt':14.80,'TJ':18.82}
#maximum time to return whatever the current best answer is
maxWait = 4000 

#Team Count
#   this sets the number of teams you'd like to return, and evenly distributes the number of people into that group
#   you can tweak these numbers to say split 6 people into 2 groups of 3 or 3 groups of 2 by changing the number in the 6th index, for example
#   if people cant be distributed evenly in each groups, 'dummy' people are created to help balance (then removed later)
#  numPeople : 0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 
teamCount  = [ 0, 1, 2, 3, 2, 2, 2, 2, 2, 3, 3, 4, 3, 4, 4, 4, 4] #ex) for 16 people, we break into 4 teams

#Dummy NC Score
# when dummy people are needed to create even groupings, they'll take on this NC score
# this was intended to be zero, meaning they neither contribute nor hinder a team, but if you feel differently try tweaking this number
dummyNCScore = 0
#==============================================================================================================================================

import itertools
import time
from math import ceil

#Class to help break out of nested loops later
class LoopLeave(Exception):
	#https://stackoverflow.com/questions/653509/breaking-out-of-nested-loops
	pass

numPeople = len(people)
numTeams = teamCount[numPeople]
dummyCount = int((numTeams - (numPeople/numTeams % 1) * numTeams) % numTeams)
maxDummiesPerTeam = int(ceil(dummyCount/numTeams))

#Add Dummies if needed
print("Creating " + str(dummyCount) + " dummy(s) with NC score of " + str(dummyNCScore))
dummySet = set([f'DUMMY{i}' for i in range(dummyCount)])
if dummyCount > 0:
	for i in range(dummyCount):
		people[list(dummySet)[i]] = dummyNCScore
	numPeople = len(people)

print("Preparing " + str(numTeams) + " teams of " + str(int(numPeople/numTeams)) + " people each...")

#Get list of all possible combinations of people (teams)
mean = sum(people.values()) / numPeople
people = dict(sorted(people.items(), key=lambda item: item[1]))
teams = list(itertools.combinations(people.keys(), int(numPeople/numTeams)))
teamScores = [0 for i in range(len(teams))]

#Get variance to mean for each team combination
for i in range(len(teams)):
	teamScores[i] = abs(sum(people[person] - mean for person in teams[i]))

#Sort list to optimze search
teams_sorted = [t for _, t in sorted(zip(teamScores,teams))]
scores_sorted = [t for _, t in sorted(zip(teamScores,teamScores))]

#Reduce all team combinations to the best team with minimal difference
totCombos = len(teams_sorted)
tmpScore = 0
minScore = max(people.values()) * numTeams
minCombo = []
timeOut = time.time() + maxWait

try:
	#Check Team A Grouping
	for a in range(totCombos):
		sa = set(teams_sorted[a])
		if (scores_sorted[a] < minScore) and (len((sa & dummySet)) <= maxDummiesPerTeam):
			if numTeams <= 1:
				tmpScore = scores_sorted[a]
				if tmpScore < minScore:
					minScore = tmpScore
					minCombo = [sa]
					print("[FOUND]:           ","Teams:",minCombo,"Variance:",minScore)
			else:

				#Check Team B Grouping
				for b in range(a+1, totCombos):
					sb = set(teams_sorted[b])
					if not ((sb & sa)) and (scores_sorted[b] < minScore) and (len((sb & dummySet))<=maxDummiesPerTeam):
						if numTeams <= 2:
							tmpScore = scores_sorted[a] + scores_sorted[b]
							if tmpScore < minScore:
								minScore = tmpScore
								minCombo = [sa, sb]
								print("[FOUND]:           ","Teams:",minCombo,"Variance:",minScore)
							if time.time() > timeOut:
								raise LoopLeave
						else:

							#Check Team C Grouping
							for c in range(b+1, totCombos):
								sc = set(teams_sorted[c])
								if not ((sc & sa) or (sc & sb)) and (scores_sorted[c] < minScore) and (len((sc & dummySet))<=maxDummiesPerTeam):
									if numTeams <= 3:
										tmpScore = scores_sorted[a] + scores_sorted[b] + scores_sorted[c]
										if tmpScore < minScore:
											minScore = tmpScore
											minCombo = [sa, sb, sc]
											print("[FOUND]:           ","Teams:",minCombo,"Variance:",minScore)
										if time.time() > timeOut:
											raise LoopLeave
									else:

										#Check Team D Grouping
										for d in range(c+1, totCombos):
											sd = set(teams_sorted[d])
											if not ((sd & sa) or (sd & sb) or (sd & sc)) and (scores_sorted[d] < minScore) and (len((sd & dummySet))<=maxDummiesPerTeam):
												if numTeams <= 4:
													tmpScore = scores_sorted[a] + scores_sorted[b] + scores_sorted[c] + scores_sorted[d]
													if tmpScore < minScore:
														minScore = tmpScore
														minCombo = [sa, sb, sc, sd]
														print("[FOUND]:           ","Teams:",minCombo,"Variance:",minScore)
													if time.time() > timeOut:
														raise LoopLeave

except LoopLeave:
	print("[TIME REACHED]:    ", maxWait, " seconds")
	pass

#Output results in Excel tab delimited format, sorted by NC, eliminate 'dummy' people
print("[COPY TO EXCEL]:")
for i in range(len(minCombo)):
	members = list(minCombo[i])

	#remove dummies
	for j in range(len(members)-1,0,-1):
		if "DUMMY" in members[j]:
			members.pop(j)

	member_scores = [people[members[x]] for x in range(len(members))]
	print(f"Team{i+1}\t"+"\t".join([m for _, m in sorted(zip(member_scores,members), key=None, reverse=True)]))
